version: 2

defaults: &defaults
  docker:
    - image: circleci/ruby:2.6.5-node
  working_directory: ~/repo

workflows:
  version: 2
  test-and-publish:
    jobs:
      - test:
          filters:
            branches:
              only: /.*/

      - publish:
          requires:
            - test
          filters:
            branches:
              only: master

jobs:
  test:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: run tests
          command: |
            mkdir -p /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            $TEST_FILES

      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  publish:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Setup Rubygems
          command: bash .circleci/setup-rubygems.sh

      - run:
          name: Publish to Rubygems
          command: |
            CURRENT_VERSION=$(ruby -r "./lib/story_branch/version.rb" -e "puts StoryBranch::VERSION")
            CURRENT_TAG=$(git tag --points-at HEAD)

            if [[ "${CURRENT_TAG}" == "${CURRENT_VERSION}" ]]; then
              gem build story_branch.gemspec
              gem push "story_branch-${CURRENT_VERSION}.gem"
            else
              echo "Not tagged as a new version - skipping gem push"
            fi

            shred -u ~/.gem/credentials
